[
  {
    "BlueLabel": "<!DOCTYPE html>",
    "GreenLabel": "<meta charset=\"utf-8\">",
    "OrangeLabel": "<script src=\"//d3js.org/d3.v4.0.0-alpha.4.min.js\"></script>",
    "RoseLabel": "<null>",
    "YellowLabel": "",
    "PurpleLabel": "",
    "BrownLabel": "<null>"
  },
  {
    "BlueLabel": "<!DOCTYPE html>",
    "GreenLabel": "<meta charset=\"utf-8\">",
    "OrangeLabel": "<script>\n\nvar canvas = document.querySelector(\"canvas\"),\n    context = canvas.getContext(\"2d\");\n\nvar width = canvas.width,\n    height = canvas.height,\n    radius = Math.min(width, height) / 2;\n\nvar colors = [\"#98abc5\", \"#8a89a6\", \"#7b6888\", \"#6b486b\", \"#a05d56\", \"#d0743c\", \"#ff8c00\"];\n\nvar arc = d3.arc()\n    .outerRadius(radius - 10)\n    .innerRadius(radius - 70)\n    .context(context);\n\nvar labelArc = d3.arc()\n    .outerRadius(radius - 40)\n    .innerRadius(radius - 40)\n    .context(context);\n\nvar pie = d3.pie()\n    .sort(null)\n    .value(function(d) { return d.population; });\n\ncontext.translate(width / 2, height / 2);\n\nd3.requestTsv(\"data.tsv\", function(d) {\n  d.population = +d.population;\n  return d;\n}, function(error, data) {\n  if (error) throw error;\n\n  var arcs = pie(data);\n\n  arcs.forEach(function(d, i) {\n    context.beginPath();\n    arc(d);\n    context.fillStyle = colors[i];\n    context.fill();\n  });\n\n  context.beginPath();\n  arcs.forEach(arc);\n  context.strokeStyle = \"#fff\";\n  context.stroke();\n\n  context.textAlign = \"center\";\n  context.textBaseline = \"middle\";\n  context.fillStyle = \"#000\";\n  arcs.forEach(function(d) {\n    var c = labelArc.centroid(d);\n    context.fillText(d.data.age, c[0], c[1]);\n  });\n});\n\n</script>",
    "RoseLabel": "<null>",
    "YellowLabel": "",
    "PurpleLabel": "",
    "BrownLabel": "<null>"
  },
  {
    "BlueLabel": "<!DOCTYPE html>",
    "GreenLabel": "<meta charset=\"utf-8\">",
    "OrangeLabel": "<script src=\"//d3js.org/d3.v3.min.js\"></script>",
    "RoseLabel": "<style>\n\nbody {\n  font: 10px sans-serif;\n}\n\n.axis path,\n.axis line {\n  fill: none;\n  stroke: #000;\n  shape-rendering: crispEdges;\n}\n\n</style>",
    "YellowLabel": "<null>",
    "PurpleLabel": "<body>",
    "BrownLabel": "<null>"
  },
  {
    "BlueLabel": "<!DOCTYPE html>",
    "GreenLabel": "<meta charset=\"utf-8\">",
    "OrangeLabel": "<script>\n\nvar format = d3.time.format(\"%m/%d/%y\");\n\nvar margin = {top: 20, right: 30, bottom: 30, left: 40},\n    width = 960 - margin.left - margin.right,\n    height = 500 - margin.top - margin.bottom;\n\nvar x = d3.time.scale()\n    .range([0, width]);\n\nvar y = d3.scale.linear()\n    .range([height, 0]);\n\nvar z = d3.scale.category20c();\n\nvar xAxis = d3.svg.axis()\n    .scale(x)\n    .orient(\"bottom\")\n    .ticks(d3.time.days);\n\nvar yAxis = d3.svg.axis()\n    .scale(y)\n    .orient(\"left\");\n\nvar stack = d3.layout.stack()\n    .offset(\"zero\")\n    .values(function(d) { return d.values; })\n    .x(function(d) { return d.date; })\n    .y(function(d) { return d.value; });\n\nvar nest = d3.nest()\n    .key(function(d) { return d.key; });\n\nvar area = d3.svg.area()\n    .interpolate(\"cardinal\")\n    .x(function(d) { return x(d.date); })\n    .y0(function(d) { return y(d.y0); })\n    .y1(function(d) { return y(d.y0 + d.y); });\n\nvar svg = d3.select(\"body\").append(\"svg\")\n    .attr(\"width\", width + margin.left + margin.right)\n    .attr(\"height\", height + margin.top + margin.bottom)\n  .append(\"g\")\n    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\nd3.csv(\"data.csv\", function(error, data) {\n  if (error) throw error;\n\n  data.forEach(function(d) {\n    d.date = format.parse(d.date);\n    d.value = +d.value;\n  });\n\n  var layers = stack(nest.entries(data));\n\n  x.domain(d3.extent(data, function(d) { return d.date; }));\n  y.domain([0, d3.max(data, function(d) { return d.y0 + d.y; })]);\n\n  svg.selectAll(\".layer\")\n      .data(layers)\n    .enter().append(\"path\")\n      .attr(\"class\", \"layer\")\n      .attr(\"d\", function(d) { return area(d.values); })\n      .style(\"fill\", function(d, i) { return z(i); });\n\n  svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n      .call(xAxis);\n\n  svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .call(yAxis);\n});\n\n</script>",
    "RoseLabel": "<style>\n\nbody {\n  font: 10px sans-serif;\n}\n\n.axis path,\n.axis line {\n  fill: none;\n  stroke: #000;\n  shape-rendering: crispEdges;\n}\n\n</style>",
    "YellowLabel": "<null>",
    "PurpleLabel": "<body>",
    "BrownLabel": "<null>"
  },
  {
    "BlueLabel": "<!DOCTYPE html>",
    "GreenLabel": "<meta charset=\"utf-8\">",
    "OrangeLabel": "<script src=\"//d3js.org/d3.v3.min.js\"></script>",
    "RoseLabel": "<style>\n\nbody {\n  font: 10px sans-serif;\n}\n\n.axis line {\n  stroke: #000;\n}\n\n.axis path {\n  fill: none;\n  stroke: #000;\n}\n\n.axis + .axis g text {\n  display: none;\n}\n\n</style>",
    "YellowLabel": "<null>",
    "PurpleLabel": "<body>",
    "BrownLabel": "<null>"
  },
  {
    "BlueLabel": "<!DOCTYPE html>",
    "GreenLabel": "<meta charset=\"utf-8\">",
    "OrangeLabel": "<script>\n\nvar formatDate = d3.time.format(\"%a\"),\n    formatDay = function(d) { return formatDate(new Date(2007, 0, d)); };\n\nvar width = 960,\n    height = 500,\n    outerRadius = height / 2 - 10,\n    innerRadius = 120;\n\nvar angle = d3.time.scale()\n    .range([0, 2 * Math.PI]);\n\nvar radius = d3.scale.linear()\n    .range([innerRadius, outerRadius]);\n\nvar z = d3.scale.category20c();\n\nvar stack = d3.layout.stack()\n    .offset(\"zero\")\n    .values(function(d) { return d.values; })\n    .x(function(d) { return d.time; })\n    .y(function(d) { return d.value; });\n\nvar nest = d3.nest()\n    .key(function(d) { return d.key; });\n\nvar line = d3.svg.line.radial()\n    .interpolate(\"cardinal-closed\")\n    .angle(function(d) { return angle(d.time); })\n    .radius(function(d) { return radius(d.y0 + d.y); });\n\nvar area = d3.svg.area.radial()\n    .interpolate(\"cardinal-closed\")\n    .angle(function(d) { return angle(d.time); })\n    .innerRadius(function(d) { return radius(d.y0); })\n    .outerRadius(function(d) { return radius(d.y0 + d.y); });\n\nvar svg = d3.select(\"body\").append(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height)\n  .append(\"g\")\n    .attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\");\n\nd3.csv(\"data.csv\", type, function(error, data) {\n  if (error) throw error;\n\n  var layers = stack(nest.entries(data));\n\n  // Extend the domain slightly to match the range of [0, 2Ï€].\n  angle.domain([0, d3.max(data, function(d) { return d.time + 1; })]);\n  radius.domain([0, d3.max(data, function(d) { return d.y0 + d.y; })]);\n\n  svg.selectAll(\".layer\")\n      .data(layers)\n    .enter().append(\"path\")\n      .attr(\"class\", \"layer\")\n      .attr(\"d\", function(d) { return area(d.values); })\n      .style(\"fill\", function(d, i) { return z(i); });\n\n  svg.selectAll(\".axis\")\n      .data(d3.range(angle.domain()[1]))\n    .enter().append(\"g\")\n      .attr(\"class\", \"axis\")\n      .attr(\"transform\", function(d) { return \"rotate(\" + angle(d) * 180 / Math.PI + \")\"; })\n    .call(d3.svg.axis()\n      .scale(radius.copy().range([-innerRadius, -outerRadius]))\n      .orient(\"left\"))\n    .append(\"text\")\n      .attr(\"y\", -innerRadius + 6)\n      .attr(\"dy\", \".71em\")\n      .attr(\"text-anchor\", \"middle\")\n      .text(function(d) { return formatDay(d); });\n});\n\nfunction type(d) {\n  d.time = +d.time;\n  d.value = +d.value;\n  return d;\n}\n\n</script>",
    "RoseLabel": "<style>\n\nbody {\n  font: 10px sans-serif;\n}\n\n.axis line {\n  stroke: #000;\n}\n\n.axis path {\n  fill: none;\n  stroke: #000;\n}\n\n.axis + .axis g text {\n  display: none;\n}\n\n</style>",
    "YellowLabel": "<null>",
    "PurpleLabel": "<body>",
    "BrownLabel": "<null>"
  },
  {
    "BlueLabel": "<!DOCTYPE html>",
    "GreenLabel": "<meta charset=\"utf-8\">",
    "OrangeLabel": "<script src=\"//d3js.org/d3.v3.min.js\"></script>",
    "RoseLabel": "<style>\n\n.frame {\n  fill: none;\n  stroke: #000;\n}\n\n.axis text {\n  font: 10px sans-serif;\n}\n\n.axis line,\n.axis circle {\n  fill: none;\n  stroke: #777;\n  stroke-dasharray: 1,4;\n}\n\n.axis :last-of-type circle {\n  stroke: #333;\n  stroke-dasharray: none;\n}\n\n.line {\n  fill: none;\n  stroke: red;\n  stroke-width: 1.5px;\n}\n\n</style>",
    "YellowLabel": "<null>",
    "PurpleLabel": "<body>",
    "BrownLabel": "<null>"
  },
  {
    "BlueLabel": "<!DOCTYPE html>",
    "GreenLabel": "<meta charset=\"utf-8\">",
    "OrangeLabel": "<script>\n\nvar data = d3.range(0, 2 * Math.PI, .01).map(function(t) {\n  return [t, Math.sin(2 * t) * Math.cos(2 * t)];\n});\n\nvar width = 960,\n    height = 500,\n    radius = Math.min(width, height) / 2 - 30;\n\nvar r = d3.scale.linear()\n    .domain([0, .5])\n    .range([0, radius]);\n\nvar line = d3.svg.line.radial()\n    .radius(function(d) { return r(d[1]); })\n    .angle(function(d) { return -d[0] + Math.PI / 2; });\n\nvar svg = d3.select(\"body\").append(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height)\n  .append(\"g\")\n    .attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\");\n\nvar gr = svg.append(\"g\")\n    .attr(\"class\", \"r axis\")\n  .selectAll(\"g\")\n    .data(r.ticks(5).slice(1))\n  .enter().append(\"g\");\n\ngr.append(\"circle\")\n    .attr(\"r\", r);\n\ngr.append(\"text\")\n    .attr(\"y\", function(d) { return -r(d) - 4; })\n    .attr(\"transform\", \"rotate(15)\")\n    .style(\"text-anchor\", \"middle\")\n    .text(function(d) { return d; });\n\nvar ga = svg.append(\"g\")\n    .attr(\"class\", \"a axis\")\n  .selectAll(\"g\")\n    .data(d3.range(0, 360, 30))\n  .enter().append(\"g\")\n    .attr(\"transform\", function(d) { return \"rotate(\" + -d + \")\"; });\n\nga.append(\"line\")\n    .attr(\"x2\", radius);\n\nga.append(\"text\")\n    .attr(\"x\", radius + 6)\n    .attr(\"dy\", \".35em\")\n    .style(\"text-anchor\", function(d) { return d < 270 && d > 90 ? \"end\" : null; })\n    .attr(\"transform\", function(d) { return d < 270 && d > 90 ? \"rotate(180 \" + (radius + 6) + \",0)\" : null; })\n    .text(function(d) { return d + \"Â°\"; });\n\nsvg.append(\"path\")\n    .datum(data)\n    .attr(\"class\", \"line\")\n    .attr(\"d\", line);\n\n</script>",
    "RoseLabel": "<style>\n\n.frame {\n  fill: none;\n  stroke: #000;\n}\n\n.axis text {\n  font: 10px sans-serif;\n}\n\n.axis line,\n.axis circle {\n  fill: none;\n  stroke: #777;\n  stroke-dasharray: 1,4;\n}\n\n.axis :last-of-type circle {\n  stroke: #333;\n  stroke-dasharray: none;\n}\n\n.line {\n  fill: none;\n  stroke: red;\n  stroke-width: 1.5px;\n}\n\n</style>",
    "YellowLabel": "<null>",
    "PurpleLabel": "<body>",
    "BrownLabel": "<null>"
  },
  {
    "BlueLabel": "<!DOCTYPE html>",
    "GreenLabel": "<meta charset=\"utf-8\">",
    "OrangeLabel": "<script src=\"https://d3js.org/d3.v4.min.js\"></script>",
    "RoseLabel": "<null>",
    "YellowLabel": "",
    "PurpleLabel": "",
    "BrownLabel": "<svg width=\"960\" height=\"960\" font-family=\"sans-serif\" font-size=\"10\"></svg>"
  },
  {
    "BlueLabel": "<!DOCTYPE html>",
    "GreenLabel": "<meta charset=\"utf-8\">",
    "OrangeLabel": "<script src=\"d3-scale-radial.js\"></script>",
    "RoseLabel": "<null>",
    "YellowLabel": "",
    "PurpleLabel": "",
    "BrownLabel": "<svg width=\"960\" height=\"960\" font-family=\"sans-serif\" font-size=\"10\"></svg>"
  },
  {
    "BlueLabel": "<!DOCTYPE html>",
    "GreenLabel": "<meta charset=\"utf-8\">",
    "OrangeLabel": "<script>\n\nvar svg = d3.select(\"svg\"),\n    width = +svg.attr(\"width\"),\n    height = +svg.attr(\"height\"),\n    innerRadius = 180,\n    outerRadius = Math.min(width, height) / 2 - 6,\n    g = svg.append(\"g\").attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\");\n\nvar x = d3.scaleBand()\n    .range([0, 2 * Math.PI])\n    .align(0);\n\nvar y = d3.scaleRadial()\n    .range([innerRadius, outerRadius]);\n\nvar z = d3.scaleOrdinal()\n    .range([\"#98abc5\", \"#8a89a6\", \"#7b6888\", \"#6b486b\", \"#a05d56\", \"#d0743c\", \"#ff8c00\"]);\n\nd3.csv(\"data.csv\", function(d, i, columns) {\n  for (i = 1, t = 0; i < columns.length; ++i) t += d[columns[i]] = +d[columns[i]];\n  d.total = t;\n  return d;\n}, function(error, data) {\n  if (error) throw error;\n\n  data.sort(function(a, b) { return b[data.columns[1]] / b.total - a[data.columns[1]] / a.total; });\n  x.domain(data.map(function(d) { return d.State; }));\n  z.domain(data.columns.slice(1));\n\n  g.append(\"g\")\n    .selectAll(\"g\")\n    .data(d3.stack()\n        .keys(data.columns.slice(1))\n        .offset(d3.stackOffsetExpand)\n        (data))\n    .enter().append(\"g\")\n      .attr(\"fill\", function(d) { return z(d.key); })\n    .selectAll(\"path\")\n    .data(function(d) { return d; })\n    .enter().append(\"path\")\n      .attr(\"d\", d3.arc()\n          .innerRadius(function(d) { return y(d[0]); })\n          .outerRadius(function(d) { return y(d[1]); })\n          .startAngle(function(d) { return x(d.data.State); })\n          .endAngle(function(d) { return x(d.data.State) + x.bandwidth(); })\n          .padAngle(0.01)\n          .padRadius(innerRadius));\n\n  var label = g.append(\"g\")\n    .selectAll(\"g\")\n    .data(data)\n    .enter().append(\"g\")\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"transform\", function(d) { return \"rotate(\" + ((x(d.State) + x.bandwidth() / 2) * 180 / Math.PI - 90) + \")translate(\" + innerRadius + \",0)\"; });\n\n  label.append(\"line\")\n      .attr(\"x2\", -5)\n      .attr(\"stroke\", \"#000\");\n\n  label.append(\"text\")\n      .attr(\"transform\", function(d) { return (x(d.State) + x.bandwidth() / 2 + Math.PI / 2) % (2 * Math.PI) < Math.PI ? \"rotate(90)translate(0,16)\" : \"rotate(-90)translate(0,-9)\"; })\n      .text(function(d) { return d.State; });\n\n  var yAxis = g.append(\"g\")\n      .attr(\"text-anchor\", \"middle\");\n\n  var yTick = yAxis\n    .selectAll(\"g\")\n    .data(y.ticks(5).slice(1))\n    .enter().append(\"g\");\n\n  yTick.append(\"circle\")\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"#000\")\n      .attr(\"r\", y);\n\n  yTick.append(\"text\")\n      .attr(\"y\", function(d) { return -y(d); })\n      .attr(\"dy\", \"0.35em\")\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"#fff\")\n      .attr(\"stroke-width\", 5)\n      .attr(\"stroke-linejoin\", \"round\")\n      .text(y.tickFormat(5, \"%\"));\n\n  yTick.append(\"text\")\n      .attr(\"y\", function(d) { return -y(d); })\n      .attr(\"dy\", \"0.35em\")\n      .text(y.tickFormat(5, \"%\"));\n\n  var legend = g.append(\"g\")\n    .selectAll(\"g\")\n    .data(data.columns.slice(1).reverse())\n    .enter().append(\"g\")\n      .attr(\"transform\", function(d, i) { return \"translate(-40,\" + (i - (data.columns.length - 1) / 2) * 20 + \")\"; });\n\n  legend.append(\"rect\")\n      .attr(\"width\", 18)\n      .attr(\"height\", 18)\n      .attr(\"fill\", z);\n\n  legend.append(\"text\")\n      .attr(\"x\", 24)\n      .attr(\"y\", 9)\n      .attr(\"dy\", \"0.35em\")\n      .text(function(d) { return d; });\n});\n\n</script>",
    "RoseLabel": "<null>",
    "YellowLabel": "",
    "PurpleLabel": "",
    "BrownLabel": "<svg width=\"960\" height=\"960\" font-family=\"sans-serif\" font-size=\"10\"></svg>"
  },
  {
    "BlueLabel": "<!DOCTYPE html>",
    "GreenLabel": "<meta charset=\"utf-8\">",
    "OrangeLabel": "<script src=\"https://d3js.org/d3.v4.min.js\"></script>",
    "RoseLabel": "<null>",
    "YellowLabel": "",
    "PurpleLabel": "",
    "BrownLabel": "<svg width=\"960\" height=\"960\" font-family=\"sans-serif\" font-size=\"10\"></svg>"
  },
  {
    "BlueLabel": "<!DOCTYPE html>",
    "GreenLabel": "<meta charset=\"utf-8\">",
    "OrangeLabel": "<script src=\"d3-scale-radial.js\"></script>",
    "RoseLabel": "<null>",
    "YellowLabel": "",
    "PurpleLabel": "",
    "BrownLabel": "<svg width=\"960\" height=\"960\" font-family=\"sans-serif\" font-size=\"10\"></svg>"
  },
  {
    "BlueLabel": "<!DOCTYPE html>",
    "GreenLabel": "<meta charset=\"utf-8\">",
    "OrangeLabel": "<script>\n\nvar svg = d3.select(\"svg\"),\n    width = +svg.attr(\"width\"),\n    height = +svg.attr(\"height\"),\n    innerRadius = 180,\n    outerRadius = Math.min(width, height) * 0.67,\n    g = svg.append(\"g\").attr(\"transform\", \"translate(\" + width / 2 + \",\" + height * 0.69 + \")\");\n\nvar x = d3.scaleBand()\n    .range([0, 2 * Math.PI])\n    .align(0);\n\nvar y = d3.scaleRadial()\n    .range([innerRadius, outerRadius]);\n\nvar z = d3.scaleOrdinal()\n    .range([\"#98abc5\", \"#8a89a6\", \"#7b6888\", \"#6b486b\", \"#a05d56\", \"#d0743c\", \"#ff8c00\"]);\n\nd3.csv(\"data.csv\", function(d, i, columns) {\n  for (i = 1, t = 0; i < columns.length; ++i) t += d[columns[i]] = +d[columns[i]];\n  d.total = t;\n  return d;\n}, function(error, data) {\n  if (error) throw error;\n\n  data.sort(function(a, b) { return b[data.columns[6]] -  a[data.columns[6]]; });\n  x.domain(data.map(function(d) { return d.State; }));\n  y.domain([0, d3.max(data, function(d) { return d.total; })]);\n  z.domain(data.columns.slice(1));\n\n  g.append(\"g\")\n    .selectAll(\"g\")\n    .data(d3.stack().keys(data.columns.slice(1))(data))\n    .enter().append(\"g\")\n      .attr(\"fill\", function(d) { return z(d.key); })\n    .selectAll(\"path\")\n    .data(function(d) { return d; })\n    .enter().append(\"path\")\n      .attr(\"d\", d3.arc()\n          .innerRadius(function(d) { return y(d[0]); })\n          .outerRadius(function(d) { return y(d[1]); })\n          .startAngle(function(d) { return x(d.data.State); })\n          .endAngle(function(d) { return x(d.data.State) + x.bandwidth(); })\n          .padAngle(0.01)\n          .padRadius(innerRadius));\n\n  var label = g.append(\"g\")\n    .selectAll(\"g\")\n    .data(data)\n    .enter().append(\"g\")\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"transform\", function(d) { return \"rotate(\" + ((x(d.State) + x.bandwidth() / 2) * 180 / Math.PI - 90) + \")translate(\" + innerRadius + \",0)\"; });\n\n  label.append(\"line\")\n      .attr(\"x2\", -5)\n      .attr(\"stroke\", \"#000\");\n\n  label.append(\"text\")\n      .attr(\"transform\", function(d) { return (x(d.State) + x.bandwidth() / 2 + Math.PI / 2) % (2 * Math.PI) < Math.PI ? \"rotate(90)translate(0,16)\" : \"rotate(-90)translate(0,-9)\"; })\n      .text(function(d) { return d.State; });\n\n  var yAxis = g.append(\"g\")\n      .attr(\"text-anchor\", \"end\");\n\n  var yTick = yAxis\n    .selectAll(\"g\")\n    .data(y.ticks(10).slice(1))\n    .enter().append(\"g\");\n\n  yTick.append(\"circle\")\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"#000\")\n      .attr(\"stroke-opacity\", 0.5)\n      .attr(\"r\", y);\n\n  yTick.append(\"text\")\n      .attr(\"x\", -6)\n      .attr(\"y\", function(d) { return -y(d); })\n      .attr(\"dy\", \"0.35em\")\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"#fff\")\n      .attr(\"stroke-width\", 5)\n      .text(y.tickFormat(10, \"s\"));\n\n  yTick.append(\"text\")\n      .attr(\"x\", -6)\n      .attr(\"y\", function(d) { return -y(d); })\n      .attr(\"dy\", \"0.35em\")\n      .text(y.tickFormat(10, \"s\"));\n\n  yAxis.append(\"text\")\n      .attr(\"x\", -6)\n      .attr(\"y\", function(d) { return -y(y.ticks(10).pop()); })\n      .attr(\"dy\", \"-1em\")\n      .text(\"Population\");\n\n  var legend = g.append(\"g\")\n    .selectAll(\"g\")\n    .data(data.columns.slice(1).reverse())\n    .enter().append(\"g\")\n      .attr(\"transform\", function(d, i) { return \"translate(-40,\" + (i - (data.columns.length - 1) / 2) * 20 + \")\"; });\n\n  legend.append(\"rect\")\n      .attr(\"width\", 18)\n      .attr(\"height\", 18)\n      .attr(\"fill\", z);\n\n  legend.append(\"text\")\n      .attr(\"x\", 24)\n      .attr(\"y\", 9)\n      .attr(\"dy\", \"0.35em\")\n      .text(function(d) { return d; });\n});\n\n</script>",
    "RoseLabel": "<null>",
    "YellowLabel": "",
    "PurpleLabel": "",
    "BrownLabel": "<svg width=\"960\" height=\"960\" font-family=\"sans-serif\" font-size=\"10\"></svg>"
  },
  {
    "BlueLabel": "<!DOCTYPE html>",
    "GreenLabel": "<meta charset=\"utf-8\">",
    "OrangeLabel": "<script src=\"https://d3js.org/d3.v4.min.js\"></script>",
    "RoseLabel": "<null>",
    "YellowLabel": "",
    "PurpleLabel": "",
    "BrownLabel": "<svg width=\"960\" height=\"960\" font-family=\"sans-serif\" font-size=\"10\"></svg>"
  },
  {
    "BlueLabel": "<!DOCTYPE html>",
    "GreenLabel": "<meta charset=\"utf-8\">",
    "OrangeLabel": "<script src=\"d3-scale-radial.js\"></script>",
    "RoseLabel": "<null>",
    "YellowLabel": "",
    "PurpleLabel": "",
    "BrownLabel": "<svg width=\"960\" height=\"960\" font-family=\"sans-serif\" font-size=\"10\"></svg>"
  },
  {
    "BlueLabel": "<!DOCTYPE html>",
    "GreenLabel": "<meta charset=\"utf-8\">",
    "OrangeLabel": "<script>\n\nvar svg = d3.select(\"svg\"),\n    width = +svg.attr(\"width\"),\n    height = +svg.attr(\"height\"),\n    innerRadius = 180,\n    outerRadius = Math.min(width, height) * 0.77,\n    g = svg.append(\"g\").attr(\"transform\", \"translate(\" + width / 2 + \",\" + height * 0.78 + \")\");\n\nvar x = d3.scaleBand()\n    .range([0, 2 * Math.PI])\n    .align(0);\n\nvar y = d3.scaleRadial()\n    .range([innerRadius, outerRadius]);\n\nvar z = d3.scaleOrdinal()\n    .range([\"#98abc5\", \"#8a89a6\", \"#7b6888\", \"#6b486b\", \"#a05d56\", \"#d0743c\", \"#ff8c00\"]);\n\nd3.csv(\"data.csv\", function(d, i, columns) {\n  for (i = 1, t = 0; i < columns.length; ++i) t += d[columns[i]] = +d[columns[i]];\n  d.total = t;\n  return d;\n}, function(error, data) {\n  if (error) throw error;\n\n  weave(data, function(a, b) { return b[data.columns[6]] -  a[data.columns[6]]; });\n  x.domain(data.map(function(d) { return d.State; }));\n  y.domain([0, d3.max(data, function(d) { return d.total; })]);\n  z.domain(data.columns.slice(1));\n\n  g.append(\"g\")\n    .selectAll(\"g\")\n    .data(d3.stack().keys(data.columns.slice(1))(data))\n    .enter().append(\"g\")\n      .attr(\"fill\", function(d) { return z(d.key); })\n    .selectAll(\"path\")\n    .data(function(d) { return d; })\n    .enter().append(\"path\")\n      .attr(\"d\", d3.arc()\n          .innerRadius(function(d) { return y(d[0]); })\n          .outerRadius(function(d) { return y(d[1]); })\n          .startAngle(function(d) { return x(d.data.State); })\n          .endAngle(function(d) { return x(d.data.State) + x.bandwidth(); })\n          .padAngle(0.01)\n          .padRadius(innerRadius));\n\n  var label = g.append(\"g\")\n    .selectAll(\"g\")\n    .data(data)\n    .enter().append(\"g\")\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"transform\", function(d) { return \"rotate(\" + ((x(d.State) + x.bandwidth() / 2) * 180 / Math.PI - 90) + \")translate(\" + innerRadius + \",0)\"; });\n\n  label.append(\"line\")\n      .attr(\"x2\", -5)\n      .attr(\"stroke\", \"#000\");\n\n  label.append(\"text\")\n      .attr(\"transform\", function(d) { return (x(d.State) + x.bandwidth() / 2 + Math.PI / 2) % (2 * Math.PI) < Math.PI ? \"rotate(90)translate(0,16)\" : \"rotate(-90)translate(0,-9)\"; })\n      .text(function(d) { return d.State; });\n\n  var yAxis = g.append(\"g\")\n      .attr(\"text-anchor\", \"end\");\n\n  var yTick = yAxis\n    .selectAll(\"g\")\n    .data(y.ticks(10).slice(1))\n    .enter().append(\"g\");\n\n  yTick.append(\"circle\")\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"#000\")\n      .attr(\"stroke-opacity\", 0.5)\n      .attr(\"r\", y);\n\n  yTick.append(\"text\")\n      .attr(\"x\", -6)\n      .attr(\"y\", function(d) { return -y(d); })\n      .attr(\"dy\", \"0.35em\")\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"#fff\")\n      .attr(\"stroke-linejoin\", \"round\")\n      .attr(\"stroke-width\", 3)\n      .text(y.tickFormat(10, \"s\"));\n\n  yTick.append(\"text\")\n      .attr(\"x\", -6)\n      .attr(\"y\", function(d) { return -y(d); })\n      .attr(\"dy\", \"0.35em\")\n      .text(y.tickFormat(10, \"s\"));\n\n  yAxis.append(\"text\")\n      .attr(\"x\", -6)\n      .attr(\"y\", function(d) { return -y(y.ticks(10).pop()); })\n      .attr(\"dy\", \"-1em\")\n      .text(\"Population\");\n\n  var legend = g.append(\"g\")\n    .selectAll(\"g\")\n    .data(data.columns.slice(1).reverse())\n    .enter().append(\"g\")\n      .attr(\"transform\", function(d, i) { return \"translate(-40,\" + (i - (data.columns.length - 1) / 2) * 20 + \")\"; });\n\n  legend.append(\"rect\")\n      .attr(\"width\", 18)\n      .attr(\"height\", 18)\n      .attr(\"fill\", z);\n\n  legend.append(\"text\")\n      .attr(\"x\", 24)\n      .attr(\"y\", 9)\n      .attr(\"dy\", \"0.35em\")\n      .text(function(d) { return d; });\n});\n\nfunction weave(array, compare) {\n  var i = -1, j, n = array.sort(compare).length, weave = new Array(n);\n  while (++i < n) weave[i] = array[(j = i << 1) >= n ? (n - i << 1) - 1 : j];\n  while (--n >= 0) array[n] = weave[n];\n}\n\n</script>",
    "RoseLabel": "<null>",
    "YellowLabel": "",
    "PurpleLabel": "",
    "BrownLabel": "<svg width=\"960\" height=\"960\" font-family=\"sans-serif\" font-size=\"10\"></svg>"
  },
  {
    "BlueLabel": "<!DOCTYPE html>",
    "GreenLabel": "<meta charset=\"utf-8\">",
    "OrangeLabel": "<script src=\"https://d3js.org/d3.v4.min.js\"></script>",
    "RoseLabel": "<null>",
    "YellowLabel": "",
    "PurpleLabel": "",
    "BrownLabel": "<svg width=\"960\" height=\"960\" font-family=\"sans-serif\" font-size=\"10\"></svg>"
  },
  {
    "BlueLabel": "<!DOCTYPE html>",
    "GreenLabel": "<meta charset=\"utf-8\">",
    "OrangeLabel": "<script src=\"d3-scale-radial.js\"></script>",
    "RoseLabel": "<null>",
    "YellowLabel": "",
    "PurpleLabel": "",
    "BrownLabel": "<svg width=\"960\" height=\"960\" font-family=\"sans-serif\" font-size=\"10\"></svg>"
  },
  {
    "BlueLabel": "<!DOCTYPE html>",
    "GreenLabel": "<meta charset=\"utf-8\">",
    "OrangeLabel": "<script>\n\nvar svg = d3.select(\"svg\"),\n    width = +svg.attr(\"width\"),\n    height = +svg.attr(\"height\"),\n    innerRadius = 180,\n    outerRadius = Math.min(width, height) / 2,\n    g = svg.append(\"g\").attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\");\n\nvar x = d3.scaleBand()\n    .range([0, 2 * Math.PI])\n    .align(0);\n\nvar y = d3.scaleRadial()\n    .range([innerRadius, outerRadius]);\n\nvar z = d3.scaleOrdinal()\n    .range([\"#98abc5\", \"#8a89a6\", \"#7b6888\", \"#6b486b\", \"#a05d56\", \"#d0743c\", \"#ff8c00\"]);\n\nd3.csv(\"data.csv\", function(d, i, columns) {\n  for (i = 1, t = 0; i < columns.length; ++i) t += d[columns[i]] = +d[columns[i]];\n  d.total = t;\n  return d;\n}, function(error, data) {\n  if (error) throw error;\n\n  x.domain(data.map(function(d) { return d.State; }));\n  y.domain([0, d3.max(data, function(d) { return d.total; })]);\n  z.domain(data.columns.slice(1));\n\n  g.append(\"g\")\n    .selectAll(\"g\")\n    .data(d3.stack().keys(data.columns.slice(1))(data))\n    .enter().append(\"g\")\n      .attr(\"fill\", function(d) { return z(d.key); })\n    .selectAll(\"path\")\n    .data(function(d) { return d; })\n    .enter().append(\"path\")\n      .attr(\"d\", d3.arc()\n          .innerRadius(function(d) { return y(d[0]); })\n          .outerRadius(function(d) { return y(d[1]); })\n          .startAngle(function(d) { return x(d.data.State); })\n          .endAngle(function(d) { return x(d.data.State) + x.bandwidth(); })\n          .padAngle(0.01)\n          .padRadius(innerRadius));\n\n  var label = g.append(\"g\")\n    .selectAll(\"g\")\n    .data(data)\n    .enter().append(\"g\")\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"transform\", function(d) { return \"rotate(\" + ((x(d.State) + x.bandwidth() / 2) * 180 / Math.PI - 90) + \")translate(\" + innerRadius + \",0)\"; });\n\n  label.append(\"line\")\n      .attr(\"x2\", -5)\n      .attr(\"stroke\", \"#000\");\n\n  label.append(\"text\")\n      .attr(\"transform\", function(d) { return (x(d.State) + x.bandwidth() / 2 + Math.PI / 2) % (2 * Math.PI) < Math.PI ? \"rotate(90)translate(0,16)\" : \"rotate(-90)translate(0,-9)\"; })\n      .text(function(d) { return d.State; });\n\n  var yAxis = g.append(\"g\")\n      .attr(\"text-anchor\", \"middle\");\n\n  var yTick = yAxis\n    .selectAll(\"g\")\n    .data(y.ticks(5).slice(1))\n    .enter().append(\"g\");\n\n  yTick.append(\"circle\")\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"#000\")\n      .attr(\"r\", y);\n\n  yTick.append(\"text\")\n      .attr(\"y\", function(d) { return -y(d); })\n      .attr(\"dy\", \"0.35em\")\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"#fff\")\n      .attr(\"stroke-width\", 5)\n      .text(y.tickFormat(5, \"s\"));\n\n  yTick.append(\"text\")\n      .attr(\"y\", function(d) { return -y(d); })\n      .attr(\"dy\", \"0.35em\")\n      .text(y.tickFormat(5, \"s\"));\n\n  yAxis.append(\"text\")\n      .attr(\"y\", function(d) { return -y(y.ticks(5).pop()); })\n      .attr(\"dy\", \"-1em\")\n      .text(\"Population\");\n\n  var legend = g.append(\"g\")\n    .selectAll(\"g\")\n    .data(data.columns.slice(1).reverse())\n    .enter().append(\"g\")\n      .attr(\"transform\", function(d, i) { return \"translate(-40,\" + (i - (data.columns.length - 1) / 2) * 20 + \")\"; });\n\n  legend.append(\"rect\")\n      .attr(\"width\", 18)\n      .attr(\"height\", 18)\n      .attr(\"fill\", z);\n\n  legend.append(\"text\")\n      .attr(\"x\", 24)\n      .attr(\"y\", 9)\n      .attr(\"dy\", \"0.35em\")\n      .text(function(d) { return d; });\n});\n\n</script>",
    "RoseLabel": "<null>",
    "YellowLabel": "",
    "PurpleLabel": "",
    "BrownLabel": "<svg width=\"960\" height=\"960\" font-family=\"sans-serif\" font-size=\"10\"></svg>"
  }
]